-- Bootstrap schema for Trackizer on Supabase
-- Run this in Supabase SQL editor for your project (requires admin/service role).

-- 1) Tables (generic JSONB payload + user scoping)
create table if not exists public.expenses (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  data jsonb not null,
  created_at timestamptz not null default now()
);

create table if not exists public.transactions (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  data jsonb not null,
  created_at timestamptz not null default now()
);

create table if not exists public.wallets (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  data jsonb not null,
  created_at timestamptz not null default now()
);

create table if not exists public.budgets (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  data jsonb not null,
  created_at timestamptz not null default now()
);

create table if not exists public.subscriptions (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  data jsonb not null,
  created_at timestamptz not null default now()
);

-- 2) Row Level Security (RLS)
alter table public.expenses enable row level security;
alter table public.transactions enable row level security;
alter table public.wallets enable row level security;
alter table public.budgets enable row level security;
alter table public.subscriptions enable row level security;

-- Select: user can only see their own rows
drop policy if exists "Expenses: users can view own rows" on public.expenses;
create policy "Expenses: users can view own rows"
  on public.expenses for select
  using (auth.uid() = user_id);

drop policy if exists "Transactions: users can view own rows" on public.transactions;
create policy "Transactions: users can view own rows"
  on public.transactions for select
  using (auth.uid() = user_id);

drop policy if exists "Wallets: users can view own rows" on public.wallets;
create policy "Wallets: users can view own rows"
  on public.wallets for select
  using (auth.uid() = user_id);

drop policy if exists "Budgets: users can view own rows" on public.budgets;
create policy "Budgets: users can view own rows"
  on public.budgets for select
  using (auth.uid() = user_id);

drop policy if exists "Subscriptions: users can view own rows" on public.subscriptions;
create policy "Subscriptions: users can view own rows"
  on public.subscriptions for select
  using (auth.uid() = user_id);

-- Insert: user can only insert rows for themself
drop policy if exists "Expenses: users can insert own rows" on public.expenses;
create policy "Expenses: users can insert own rows"
  on public.expenses for insert
  with check (auth.uid() = user_id);

drop policy if exists "Transactions: users can insert own rows" on public.transactions;
create policy "Transactions: users can insert own rows"
  on public.transactions for insert
  with check (auth.uid() = user_id);

drop policy if exists "Wallets: users can insert own rows" on public.wallets;
create policy "Wallets: users can insert own rows"
  on public.wallets for insert
  with check (auth.uid() = user_id);

drop policy if exists "Budgets: users can insert own rows" on public.budgets;
create policy "Budgets: users can insert own rows"
  on public.budgets for insert
  with check (auth.uid() = user_id);

drop policy if exists "Subscriptions: users can insert own rows" on public.subscriptions;
create policy "Subscriptions: users can insert own rows"
  on public.subscriptions for insert
  with check (auth.uid() = user_id);

-- (Optional) Indexes for faster queries
create index if not exists idx_expenses_user_created on public.expenses (user_id, created_at desc);
create index if not exists idx_transactions_user_created on public.transactions (user_id, created_at desc);
create index if not exists idx_wallets_user_created on public.wallets (user_id, created_at desc);
create index if not exists idx_budgets_user_created on public.budgets (user_id, created_at desc);
create index if not exists idx_subscriptions_user_created on public.subscriptions (user_id, created_at desc);

-- Grants: Supabase manages anon/authenticated roles; RLS policies govern access.
-- No extra grants needed beyond defaults.

-- After running:
-- 1) Open the app → Settings → Check cloud setup (should say 'All tables accessible').
-- 2) Tap 'Sync now' to push any queued local data.
-- 3) Log out, then log back in to verify recovery (pull).
